name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger: none
pr: none

variables:
- group: global-variables
- name: azureSubscription
  value: AzureSubscription
- name: terraformVersion
  value: 1.1.5
- name: terraformPath
  value: terraform
- name: tfstatePath
  value: terraform.tfstate
- name: environment
  value: production
- name: prefix
  value: ScotiaPega
- name: location
  value: canadacentral
- name: kubernetesVersion
  value: '1.22.6'
- name: resourceGroupName
  value: ScotiaPegaRG
- name: containerName
  value: scripts
- name: scriptPath
  value: terraform/scripts
- name: scriptName
  value: configure-jumpbox-vm.sh
  
pool:
  vmImage: ubuntu-latest

stages :
- stage: terraform_deployment
  displayName: 'Terraform Deployment'
  jobs: 
  - deployment: production
    displayName: 'Terraform Apply'
    environment: $(environment)
    continueOnError: false
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzureCLI@2
            displayName: 'Get Latest Kubernetes Version'
            condition: and(succeeded(), not(eq(variables.storageAccountName, '')), not(eq(variables.storageAccountKey, '')))
            inputs:
              scriptType: bash
              scriptLocation: inlineScript
              azureSubscription: $(azureSubscription)
              addSpnToEnvironment: true
              inlineScript: |
                version=$(az aks get-versions --location $(location) --query "orchestrators[?isPreview==false].orchestratorVersion | sort(@) | [-1]" --output tsv)
                echo "##vso[task.setvariable variable=kubernetesVersion;]$version"
                echo "kubernetesVersion: $(kubernetesVersion)"
          - task: TerraformInstaller@0
            displayName: 'Terraform Install'
            condition: and(succeeded(), not(eq(variables.storageAccountName, '')), not(eq(variables.storageAccountKey, '')))
            inputs:
              terraformVersion: $(terraformVersion)
          - task: TerraformTaskV2@2
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: $(azureSubscription)
              backendAzureRmResourceGroupName: $(terraformBackendResourceGroupName)
              backendAzureRmStorageAccountName: $(terraformBackendStorageAccountName)
              backendAzureRmContainerName: '$(terraformBackendContainerName)'
              backendAzureRmKey: $(tfstatePath)
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(terraformPath)/'
          - task: TerraformTaskV2@2
            displayName: 'Terraform Validate'
            condition: and(succeeded(), not(eq(variables.storageAccountName, '')), not(eq(variables.storageAccountKey, '')))
            inputs:
              provider: 'azurerm'
              command: 'validate'
          - task: TerraformTaskV2@2
            displayName: 'Terraform Plan'
            condition: and(succeeded(), not(eq(variables.storageAccountName, '')), not(eq(variables.storageAccountKey, '')))
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-input=false -var="ssh_public_key=$(sshPublicKey)" -var="location=$(location)" -var="resource_group_name=$(resourceGroupName)" -var="script_storage_account_name=$(storageAccountName)" -var="script_storage_account_key=$(storageAccountKey)" -var="container_name=$(containerName)" -var="script_name=$(scriptName)" -var="kubernetes_version=$(kubernetesVersion)" -var-file="$(System.DefaultWorkingDirectory)/tfvars/$(environment)/$(environment).tfvars"'
              environmentServiceNameAzureRM: $(azureSubscription)
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(terraformPath)/'
          - task: TerraformTaskV2@2
            displayName: 'Terraform Apply'
            condition: and(succeeded(), not(eq(variables.storageAccountName, '')), not(eq(variables.storageAccountKey, '')))
            enabled: true
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-input=false -auto-approve -var="ssh_public_key=$(sshPublicKey)" -var="location=$(location)" -var="resource_group_name=$(resourceGroupName)" -var="script_storage_account_name=$(storageAccountName)" -var="script_storage_account_key=$(storageAccountKey)" -var="container_name=$(containerName)" -var="script_name=$(scriptName)" -var="kubernetes_version=$(kubernetesVersion)" -var-file="$(System.DefaultWorkingDirectory)/tfvars/$(environment)/$(environment).tfvars"'
              environmentServiceNameAzureRM: $(azureSubscription)
              workingDirectory: '$(System.DefaultWorkingDirectory)/$(terraformPath)/'
          